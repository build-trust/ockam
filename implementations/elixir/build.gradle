import java.nio.file.Paths;

ext {
  mode = project.hasProperty('mode') ? mode.toLowerCase() : 'dev'
  mode = (mode == 'release') ? 'prod' : mode
  mode = (mode == 'debug') ? 'dev' : mode

  apps = [
    "ockam_vault_software",
    "ockam",
    "ockam_hub",
    "ockam_kafka",
    "ockam_node_web",
  ].collect { app ->
    Paths.get(projectDir.toPath().toString(), 'ockam', app)
  }

  mix = { argument ->
    command = ['mix']
    command.addAll(argument.split())

    println "[Gradle] Command: ${command.join(' ')}"
    return command
  }
}

task rustBuild {
  dependsOn gradle.includedBuild('rust').task(':build')
}

task checkLocalHexAndRebar {
  doLast {
    exec { commandLine mix('local.hex --force --if-missing') }
    exec { commandLine mix('local.rebar --force') }
  }
}

task lint {
  group project.name
  description 'Lint the project.'

  dependsOn checkLocalHexAndRebar
  apps.each { app ->
    doLast {
      println "\n[Gradle] Lint: ${app}"
      exec {
        commandLine mix('do deps.get, lint')
        workingDir app
      }
    }
  }
}

task build {
  group project.name
  description 'Build the project.'

  dependsOn checkLocalHexAndRebar
  apps.each { app ->
    doLast {
      println "\n[Gradle] Build: ${app}"
      exec {
        commandLine mix('do deps.get, compile')
        workingDir app
        environment MIX_ENV: mode
      }
    }
  }
}

task test {
  group project.name
  description 'Test the project.'

  dependsOn checkLocalHexAndRebar, rustBuild
  apps.each { app ->
    doLast {
      println "\n[Gradle] ${app}"
      exec {
        commandLine mix('do deps.get, test')
        workingDir app
        environment MIX_ENV: 'test'
      }
    }
  }
}

task clean {
  group project.name
  description 'Clean the project.'

  apps.each { app ->
    doLast {
      println "[Gradle] Clean: ${app}"
      exec {
        commandLine mix('clean')
        workingDir app
      }
    }
  }
}

task veryClean {
  apps.each { app ->
    doLast {
      println "[Gradle] Very Clean: ${app}"
      delete Paths.get(app.toString(), "_build")
      delete Paths.get(app.toString(), "deps")
    }
  }
}
