
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.tools.ant.taskdefs.condition.Os

// Override the build directory
project.buildDir = '.env'

// Make a string more suitable to be a file or directory name
def sanitize(name) {
  name.toLowerCase().replaceAll("\\W+", "_")
}

ext {

  cmakeBinaryDir = buildDir.toString()

  // the name to use for the machine that is running gradle
  gradleHost = 'gradle_host'

  // Read the 'dockerImage' project property to decide where to run the cmake
  // tasks (cmakeHost).
  //
  // If no dockerImage is specified, we'll run the cmake tasks on the machine
  // that gradle was invoked on (gradleHost).
  cmakeHost = project.hasProperty('dockerImage') ? dockerImage : gradleHost
  cmakeHostDir = Paths.get(cmakeBinaryDir, sanitize(cmakeHost)).toString()
  cmakeBinaryDir = cmakeHostDir

  // Read the 'cmakeGenerator' project property to choose the cmake generator
  // that will be used to generate the build.
  //
  // If no cmakeGenerator is specified, we'll use 'Unix Makefiles'
  //
  // cmake.org/cmake/help/latest/manual/cmake-generators.7.html
  cmakeGenerator = project.hasProperty('cmakeGenerator') ? cmakeGenerator : 'detected_generator'
  cmakeGeneratorDir = Paths.get(cmakeBinaryDir, sanitize(cmakeGenerator)).toString()
  cmakeBinaryDir = cmakeGeneratorDir

  //
  cmakeToolchainFile = project.hasProperty('cmakeToolchainFile') ? cmakeToolchainFile : 'detected_toolchain'
  cmakeToolchainId = cmakeToolchainFile.digest('SHA-256').take(10)
  cmakeToolchainId = (cmakeToolchainFile == 'detected_toolchain') ? cmakeToolchainFile : cmakeToolchainId
  cmakeToolchainDir = Paths.get(cmakeBinaryDir, sanitize(cmakeToolchainId)).toString()
  cmakeBinaryDir = cmakeToolchainDir

  //
  target = project.hasProperty('target') ? target : 'detected_target'
  targetDir = Paths.get(cmakeToolchainDir, sanitize(target)).toString()
  cmakeBinaryDir = targetDir

  // Read the 'mode' project property to decide in what cmakeBuildType should
  // be use to generate and build projects.
  //
  // Default mode is Test.
  //
  // To support higher level gradle builds that may also be compiling Elixir
  // - Dev is an alias to Debug
  // - Prod is an alias to Release
  //
  // If mode is Test, cmakeBuildType is 'Debug' and cmakeBuildTesting is
  // set to ON
  //
  // cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html
  mode = project.hasProperty('mode') ? mode.toLowerCase().capitalize() : 'Test'
  mode = (mode == 'Dev') ? 'Debug' : mode
  mode = (mode == 'Prod') ? 'Release' : mode
  mode = (mode == 'Relwithdebinfo') ? 'RelWithDebInfo' : mode
  mode = (mode == 'Minsizerel') ? 'MinSizeRel' : mode
  cmakeBuildType = (mode == 'Test') ? 'Debug' : mode
  cmakeBuildTesting = (mode == 'Test') ? 'ON' : 'OFF'

  // Decide if the cmakeGenerator is multi-config
  //
  // If the generator is single config generator, then cmakeBinaryDir will be:
  //    buildDir/host/generator/toolchain/target/mode
  // If the generator is milti config generator, then cmakeBinaryDir will be:
  //    buildDir/host/generator/toolchain/target
  cmakeGeneratorIsMultiConfig = {
    def generator = cmakeGenerator.toUpperCase()
    generator.contains('MULTI') || generator.contains('XCODE') || generator.contains('VISUAL STUDIO')
  }()
  modeDir = cmakeGeneratorIsMultiConfig ? cmakeBinaryDir : Paths.get(cmakeBinaryDir, sanitize(mode)).toString()
  cmakeBinaryDir = modeDir
  cmakeBinaryDirRelative = projectDir.toPath().relativize(Paths.get(cmakeBinaryDir))

  //
  cmakeOptions = project.hasProperty('otherCmakeOptions') ? cmakeOptions : ''

  // detect if gradleHost is windows
  isWindows = Os.isFamily(Os.FAMILY_WINDOWS)

  // Check if gradleHost has docker available
  hasDocker = {
    try {
      def process = 'docker'.execute()
      process.waitForOrKill(200000)
      process.exitValue() == 0
    } catch(Exception ex) { false }
  }()
  useDocker = hasDocker && !isWindows && (cmakeHost != gradleHost)

  dockerFile = Paths.get(cmakeHostDir, 'Dockerfile')
  dockerEntrypoint = Paths.get(cmakeHostDir, 'docker-entrypoint.sh')
  dockerImageCreatedFlag = Paths.get(cmakeHostDir, 'docker_image_created.flag')
  dockerImageTag = "${buildDir.toString().digest('SHA-256').take(10)}_${cmakeHostDir.digest('SHA-256').take(10)}"
  dockerImageName = "ockam:${dockerImageTag}"

  buildDeps = []
  commandPrefix = isWindows ? ['cmd', '/c'] : []
  testCommandPrefix = isWindows ? ['cmd', '/c'] : []
  testDir = cmakeBinaryDir

  cmakeCache = Paths.get(cmakeBinaryDir.toString(), 'CMakeCache.txt')
  buildDoneFlag = Paths.get(cmakeBinaryDir.toString(), 'build_done.flag')
}

task createCmakeHostDir {
  doLast {
    mkdir cmakeHostDir
  }
}

buildDeps.add(createCmakeHostDir)

if(useDocker) {

  task createDockerEntrypoint {
    dependsOn createCmakeHostDir
    onlyIf { !file(dockerEntrypoint).exists() }
    doLast {
      file(dockerEntrypoint).write '''\
        #!/bin/bash

        USER_ID=${LOCAL_USER_ID:-9001}

        useradd --shell /bin/bash -u $USER_ID -o -c "" -m builder
        export HOME=/home/builder

        exec gosu builder "$@"
      '''.stripIndent()
    }
  }

  task createDockerFile {
    def content = ''

    if(cmakeHost.startsWith('dockcross')) {
      dependsOn createDockerEntrypoint
      content = """\
        FROM ${cmakeHost}
        COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
        RUN chmod +x /usr/local/bin/docker-entrypoint.sh
        WORKDIR /work
        ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
      """.stripIndent()
    } else {
      dependsOn createCmakeHostDir
      content = """\
        FROM ${cmakeHost}
        WORKDIR /work
      """.stripIndent()
    }

    onlyIf { !file(dockerFile).exists() }
    doLast { file(dockerFile).write content }
  }

  task buildDockerImage {
    def command = commandPrefix + ['docker', 'build', '-t', dockerImageName, '.']

    dependsOn createDockerFile
    onlyIf { !file(dockerImageCreatedFlag).exists() }
    doLast {
      exec {
        workingDir cmakeHostDir
        commandLine command
      }
      file(dockerImageCreatedFlag).write dockerImageName
    }
  }

  task removeDockerImage {
    def command = commandPrefix + ['docker', 'rmi', dockerImageName]

    doLast {
      exec {
        commandLine command
        ignoreExitValue true
      }
      delete dockerImageCreatedFlag
    }
  }

  buildDeps.add(buildDockerImage)
  def uid = ["id", "-u"].execute().text.trim()
  commandPrefix.addAll([
    'docker', 'run',
    '-e', "LOCAL_USER_ID=${uid}",
    '--workdir', '/work/implementations/c',
    '--rm',
    '--volume', "${projectDir}/../..:/work",
    dockerImageName
  ])

  testDir = projectDir
  testCommandPrefix.addAll([
    'docker', 'run',
    '-e', "LOCAL_USER_ID=${uid}",
    '--workdir', "/work/implementations/c/${cmakeBinaryDirRelative}",
    '--rm',
    '--volume', "${projectDir}/../..:/work",
    dockerImageName
  ])

  task showDockerRunCommand {
    def command = commandPrefix + ['sh']
    command.addAll(2, ['-it'])

    dependsOn buildDeps
    doLast { println command.join(' ') }
  }
}

task cmakeGenerate {
  def command = commandPrefix + [
    'cmake',
    '-S', '.',
    '-B', cmakeBinaryDirRelative,
    "-DBUILD_TESTING=${cmakeBuildTesting}",
    "-DCMAKE_BUILD_TYPE=${cmakeBuildType}",
    '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',
    cmakeOptions
  ]

  if(cmakeGenerator != 'detected_generator') {
    command = command + ['-G', cmakeGenerator]
  }

  dependsOn buildDeps
  onlyIf { !file(cmakeCache).exists() }
  doLast {
    exec {
      commandLine command
    }
  }
}

task build {
  group project.name
  description 'Build the project.'

  dependsOn cmakeGenerate
  onlyIf { !file(buildDoneFlag).exists() }
  doLast {
    exec {
      commandLine commandPrefix + ['cmake', '--build', cmakeBinaryDirRelative, '--config', cmakeBuildType]
    }
    file(buildDoneFlag).write "${new Date()}"
  }
}

task clean {
  group project.name
  description 'Clean the project.'

  onlyIf { file(cmakeCache).exists() }
  doLast {
    exec {
      commandLine commandPrefix + ['cmake', '--build', cmakeBinaryDirRelative, '--target', 'clean']
      ignoreExitValue true
    }
    delete buildDoneFlag
  }
}

task test {
  group project.name
  description 'Test the project.'

  dependsOn build
  doLast {
    exec {
      commandLine testCommandPrefix + ['ctest']
      workingDir testDir
    }
  }
}
