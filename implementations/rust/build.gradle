project.buildDir = java.nio.file.Paths.get('..', '..', 'target');

if(project.hasProperty('mode')) {
  ext.mode = mode.toLowerCase()
} else {
  ext.mode = gradle.parent != null ? 'release' : 'debug'
}

ext {
  // Are we running as part of Continuous Integration?
  ci = System.getenv('CI') == 'true'

  // Upgrade checks are not necessary during CLI development
  // Ockam will also receive anonymized statistics from GitHub based on these checks
  upgradeCheckEnvVar = 'OCKAM_DISABLE_UPGRADE_CHECK'
  upgradeCheckDisabledValues = ['1', 'true', 'yes']
  upgradeCheckValue = System.getenv(upgradeCheckEnvVar)
  upgradeCheckDisabled = upgradeCheckDisabledValues.contains(upgradeCheckValue)

  // Environment variables for CI tasks
  // See...
  //  https://github.com/build-trust/ockam/issues/2822
  //  https://github.com/build-trust/ockam/issues/2342
  environmentVars = { ->
    env = [
      RUSTFLAGS: "--cfg tokio_unstable -Cdebuginfo=0 -Dwarnings -C link-arg=-fuse-ld=/opt/mold/bin/mold",
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: "clang",
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "clang",
      CARGO_INCREMENTAL: "0"
    ]
    return ci ? env : [:]
  }

  // Cargo command
  cargo = { String... arguments ->
    command = ['cargo']
    command.addAll(arguments)

    if (command.contains('build') && mode == 'release') {
      command.add('--release')
    }

    println "[Gradle] Command: ${command.join(' ')}"
    return command
  }
}

task lint_cargo_fmt_check {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('fmt', '--all', '--', '--check')
    }
  }
}

task lint_cargo_clippy {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('clippy', '--no-deps', "--all-targets", '--', '-D', 'warnings')
    }
  }
}

task lint_cargo_deny {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('deny', '--all-features', '--manifest-path=../../Cargo.toml', 'check', '--config=tools/cargo-deny/deny.toml', 'licenses', 'advisories')
    }
  }
}

task lint_environment_variables {
  doFirst {
    logger.warn("""
    Contributors: Please set the environment variable {} to one of: {}
    Current value is: {}
    This will prevent the CLI from fetching a list of GitHub releases during normal use or while running automated tests.
    Ockam also receives anonymized metrics about how often `ockam` commands are being run based on these requests.
    For more information: see `ockam_command/src/upgrade.rs`
    https://github.com/build-trust/ockam/blob/a9bf6fe65f8d473affe75fc978758ebd50d5c5b8/implementations/rust/ockam/ockam_command/src/upgrade.rs#L14-L51
    """, upgradeCheckEnvVar,  upgradeCheckDisabledValues, upgradeCheckValue, upgradeCheckDisabled)
  }

  onlyIf {
    !upgradeCheckDisabled
  }
}

task lint {
  group project.name
  description 'Lint the project.'

  dependsOn lint_cargo_fmt_check, lint_cargo_clippy, lint_cargo_deny, lint_environment_variables
}

task build_docs {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('doc', '--no-deps')
    }
  }
}

task build {
  dependsOn lint_environment_variables
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('--locked', 'build')
    }
  }
}

task build_vault {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('--locked', 'build', '-p', 'ockam_vault', '-p', 'ockam-ffi')
    }
  }
}

task build_examples {
  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('--locked', 'build', '--examples')
    }
  }
}

// This task needs to be executed in the `implementations/rust` directory
// It collects the names of all the crates and runs the cargo readme task to update
// the crate README file according to a common template and to the top-level documentation of the src/lib.rs file
task update_readmes {
  doLast {
    new File("ockam").eachDir { directory ->
      exec {
        environment environmentVars()
        commandLine cargo('readme', '--project-root', "ockam/${directory.name}", '--template', '../README.tpl', '-o', "README.md")
      }
    }
  }
}

task test {
  group project.name
  description 'Test the project.'

  doLast {
    if (ci) {
      // Use 'cargo nextest' in CI
      exec {
        environment environmentVars()
        commandLine cargo('--locked', 'nextest', '--config-file', '../../tools/nextest/.config/nextest.toml', 'run')
      }
      // Nextest does not currently support doctests,
      // so run doctests using cargo
      // See https://github.com/nextest-rs/nextest/issues/16
      exec {
        environment environmentVars()
        commandLine cargo('--locked', 'test', '--doc')
      }
    }
    else {
      // Use 'cargo test' when not in CI
      exec {
        environment environmentVars()
        commandLine cargo('--locked', 'test')
      }
    }
  }
}

task clean {
  group project.name
  description 'Clean the project.'

  doLast {
    exec {
      environment environmentVars()
      commandLine cargo('clean')
    }
  }
}

task veryClean {
  group project.name
  description 'Clean the project.'

  doLast {
    println "[Gradle] Very Clean: ${buildDir}"
    delete buildDir
  }
}
