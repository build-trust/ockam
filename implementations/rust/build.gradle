project.buildDir = java.nio.file.Paths.get('..', '..', 'target');

if(project.hasProperty('mode')) {
  ext.mode = mode.toLowerCase()
} else {
  ext.mode = gradle.parent != null ? 'release' : 'debug'
}

ext {
  // Environment variables for CI tasks
  // See...
  //  https://github.com/build-trust/ockam/issues/2822
  //  https://github.com/build-trust/ockam/issues/2342
  environmentCI = { ->
    env = [
      RUSTFLAGS: "--cfg tokio_unstable -Cdebuginfo=0 -Dwarnings -C link-arg=-fuse-ld=/opt/mold/bin/mold",
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: "clang",
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "clang",
      CARGO_INCREMENTAL: "0"
    ]
    return System.getenv('CI') == 'true' ? env : [:]
  }

  // Cargo command
  cargo = { String... arguments ->
    command = ['cargo']
    command.addAll(arguments)

    if (command.contains('build') && mode == 'release') {
      command.add('--release')
    }

    println "[Gradle] Command: ${command.join(' ')}"
    return command
  }
}

task lint_cargo_fmt_check {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('fmt', '--all', '--', '--check')
    }
  }
}

task lint_cargo_clippy {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('clippy', '--no-deps', '--', '-D', 'warnings')
    }
  }
}

task lint_cargo_deny {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('deny', '--all-features', '--manifest-path=../../Cargo.toml', 'check', 'licenses', 'advisories')
    }
  }
}

task lint {
  group project.name
  description 'Lint the project.'

  dependsOn lint_cargo_fmt_check, lint_cargo_clippy, lint_cargo_deny
}

task build_docs {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('doc', '--no-deps')
    }
  }
}

task build {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('--locked', 'build')
    }
  }
}

task build_examples {
  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('--locked', 'build', '--examples')
    }
  }
}

task test {
  group project.name
  description 'Test the project.'

  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('--locked', 'test')
    }
  }
}

task clean {
  group project.name
  description 'Clean the project.'

  doLast {
    exec {
      environment environmentCI()
      commandLine cargo('clean')
    }
  }
}

task veryClean {
  group project.name
  description 'Clean the project.'

  doLast {
    println "[Gradle] Very Clean: ${buildDir}"
    delete buildDir
  }
}
