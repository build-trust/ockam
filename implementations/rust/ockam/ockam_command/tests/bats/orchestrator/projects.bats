#!/bin/bash

# ===== SETUP

setup() {
  load ../load/base.bash
  load ../load/orchestrator.bash
  load_bats_ext
  setup_home_dir
  skip_if_orchestrator_tests_not_enabled
  copy_enrolled_home_dir
}

teardown() {
  teardown_home_dir
}

# ===== TESTS
@test "projects - version" {
  run_success "$OCKAM" project version
}

@test "project - enrollment from file - parse check" {
  TICKET_PATH="$OCKAM_HOME/p.ticket"
  run_success bash -c "$OCKAM project ticket --usage-count 10 >$TICKET_PATH"

  # From file
  run_success "$OCKAM" project enroll $TICKET_PATH --test-argument-parser
  run_failure "$OCKAM" project enroll missing-file --test-argument-parser

  # From contents
  run_success "$OCKAM" project enroll $(cat $TICKET_PATH) --test-argument-parser
  run_failure "$OCKAM" project enroll "INVALID_TICKET" --test-argument-parser
}

@test "projects - enrollment with controller" {
  ENROLLED_OCKAM_HOME=$OCKAM_HOME

  # Change new home directories for two un-enrolled identities
  setup_home_dir
  GREEN_OCKAM_HOME=$OCKAM_HOME
  run_success "$OCKAM" project import --project-file $PROJECT_PATH

  run_success "$OCKAM" identity create green
  green_identifier=$($OCKAM identity show green)
  # green hasn't been added by enroller yet
  run_failure "$OCKAM" project enroll --identity green

  setup_home_dir
  BLUE_OCKAM_HOME=$OCKAM_HOME
  run_success "$OCKAM" project import --project-file $PROJECT_PATH

  run_success "$OCKAM" identity create blue
  blue_identifier=$($OCKAM identity show blue)
  # blue hasn't been added by enroller yet
  run_failure "$OCKAM" project enroll --identity blue

  export OCKAM_HOME=$ENROLLED_OCKAM_HOME
  run_success $OCKAM project-member add "$green_identifier" --attribute role=member
  blue_token=$($OCKAM project ticket --usage-count 10 --attribute role=member)

  # Green' identity was added by enroller
  export OCKAM_HOME=$GREEN_OCKAM_HOME
  run_success "$OCKAM" project enroll --identity green
  assert_output --partial "$green_identifier"

  # For blue, we use an enrollment token generated by enroller
  # The ticket contains all the information about the project
  export OCKAM_HOME=$BLUE_OCKAM_HOME
  run_success "$OCKAM" project enroll $blue_token --identity blue
  assert_output --partial "$blue_identifier"

  run_success $OCKAM message send --timeout 5 --to "/project/default/service/echo" "hello"
  assert_output "hello"
}

@test "projects - access requiring credential" {
  ENROLLED_OCKAM_HOME=$OCKAM_HOME

  # Change to a new home directory where there are no enrolled identities
  setup_home_dir
  NON_ENROLLED_OCKAM_HOME=$OCKAM_HOME
  "$OCKAM" project import --project-file $PROJECT_PATH

  # Create a named default identity
  run_success "$OCKAM" identity create green
  green_identifier=$($OCKAM identity show green)

  # Create a node for the non-enrolled identity using the exported project information
  # This is the default node for $NON_ENROLLED_OCKAM_HOME, and it uses the green identity, which is also the default identity
  run_success "$OCKAM" node create green

  # The green identity can't create relay as it isn't a member
  relay_name=$(random_str)
  run_failure "$OCKAM" relay create "$relay_name"

  # Add the green identity as a member
  export OCKAM_HOME=$ENROLLED_OCKAM_HOME
  run_success "$OCKAM" project-member add "$green_identifier" --attribute role=member --relay $relay_name
  sleep 2

  # Now the green node, with its green identity, can now access the project's services
  export OCKAM_HOME=$NON_ENROLLED_OCKAM_HOME
  run_success "$OCKAM" relay create "$relay_name"
}

@test "projects - send a message to a project node from an embedded node, enrolled member on different install" {
  skip # FIXME  how to send a message to a project m1 is enrolled to?  (with m1 being on a different install
  #       than the admin?.  If we pass project' address directly (instead of /project/ thing), would
  #       it present credential? would read authority info from project.json?

  ADMIN_HOME=$OCKAM_HOME

  setup_home_dir
  USER_HOME=$OCKAM_HOME
  run_success "$OCKAM" project import --project-file $PROJECT_PATH

  run_success "$OCKAM" identity create m2
  run_success "$OCKAM" identity create m1
  m1_identifier=$($OCKAM identity show m1)

  export OCKAM_HOME=$ADMIN_HOME
  run_success "$OCKAM" project-member add $m1_identifier --attribute role=member

  export OCKAM_HOME=$USER_HOME
  # m1' identity was added by enroller
  run_success $OCKAM project enroll --identity m1

  # m1 is a member,  must be able to contact the project' service
  run_success $OCKAM message send --timeout 5 --identity m1 --to /project/default/service/echo hello
  assert_output "hello"

  # m2 is not a member,  must not be able to contact the project' service
  run_failure $OCKAM message send --timeout 5 --identity m2 --to /project/default/service/echo hello
}

@test "projects - list addons" {
  run_success "$OCKAM" project addon list --project default
  assert_output --partial "Id: okta"
}
