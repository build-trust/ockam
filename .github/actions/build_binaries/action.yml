name: Build Ockam Binaries For Different Architechtures
description: Build Ockam Binaries For Different Architechtures

inputs:
  build_command:
    description: Indicate if building the ockam command
    default: 'true'
  build_app:
    description: Indicate if we are also building ockam app
    default: 'false'
  use_cross_build:
    description: Indicate If Cross Should Be Used To Build Binary Instead Of Cargo
    required: true
  toolchain:
    description: Indicate Toolchain To Use, Nightly or Stable
    default: stable
  target:
    description: Indicate Binary Target, e.g. x86_64-apple-darwin
    required: true
  platform_operating_system:
    description: Operating System Which We Are Building Binaries On
    required: true

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        # This will allow us update to rust version indicated in our rust-toolchain.toml file
        rustup show
        rustup target add ${{ inputs.target }}

    - shell: bash
      if: inputs.platform_operating_system == 'ubuntu-22.04'
      run: |
        set -x
        use_cross_build=${{ inputs.use_cross_build }}
        if [[ $use_cross_build == true ]]; then
          cargo install --version 0.2.5 cross
        else
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool musl-tools libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
        fi

    ## TODO Cache for faster build for different targets

    - shell: bash
      if: inputs.build_command == 'true'
      run: |
        set -x
        use_cross_build="${{ inputs.use_cross_build }}"

        if [[ "${{ inputs.target }}" =~ .+-musl(.+)?  ]]; then
          export RUSTFLAGS='-C target-feature=+crt-static'
        fi

        if [[ $use_cross_build == "true" ]]; then
          cross build --bin ockam --target ${{ inputs.target }} --release
        else
          cargo build --bin ockam --target ${{ inputs.target }} --release
        fi

        cp target/${{ inputs.target }}/release/ockam target/${{ inputs.target }}/release/ockam_command

    - shell: bash
      if: inputs.build_app == 'true'
      run: |
        set -x

        use_cross_build=${{ inputs.use_cross_build }}

        # depending on the target, we may build the x86 or arm variant
        # regardless of the host machine

        # if any macos, also build the swiftui
        if [[ ${{ inputs.target }} == *apple-darwin* ]]; then

          # first we build the rust library, cross compiling if needed
          if [[ $use_cross_build == "true" ]]; then
            cross build -p ockam_app_lib --target ${{ inputs.target }} --release
          else
            cargo build -p ockam_app_lib --target ${{ inputs.target }} --release
          fi

          # copy the ockam_app_lib and ockam binary in target/release/ where xcode is expecting them
          cp target/${{ inputs.target }}/release/ockam target/release/
          cp target/${{ inputs.target }}/release/libockam_app_lib.a target/release/
          cp target/${{ inputs.target }}/release/libockam_app_lib.d target/release/

          # address dependencies for the swiftui app
          brew install create-dmg

          if [[ ${{ inputs.target }} == *x86_64* ]]; then
            make swift_xcode_build_signed \
              DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
              PROVISIONING_PROFILE_SPECIFIER="${PROVISIONING_PROFILE_SPECIFIER}" \
              CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY}" \
              KEYCHAIN_PROFILE="${KEYCHAIN_PATH}" \
              ARCH=x86_64
          else
            make swift_xcode_build_signed \
              DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
              PROVISIONING_PROFILE_SPECIFIER="${PROVISIONING_PROFILE_SPECIFIER}" \
              CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY}" \
              KEYCHAIN_PROFILE="${KEYCHAIN_PATH}" \
              ARCH=arm64
          fi

          make swift_package_only

          xcrun notarytool submit implementations/swift/build/Ockam.dmg --team-id ${{ env.DEVELOPMENT_TEAM }} --apple-id ${{ env.NOTARIZATION_EMAIL }} --password ${{ env.NOTARIZATION_PASSWORD }} --wait
        fi
