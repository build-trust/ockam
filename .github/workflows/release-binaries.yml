name: Binary Release

on:
  workflow_dispatch:
    inputs:
      git_tag:
        description: Git Tag To Release From. Last Git Tag Is Used If Omitted
        required: false

permissions:
  # Contents permission allows us write to this repository.
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-20.04
    environment: release
    outputs:
      upload_url: ${{ steps.release_upload_url.outputs.upload_url }}
      tag_name: ${{ steps.release_version.outputs.tag_name }}
    steps:
      - name: Checkout Ockam
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          fetch-depth: 0

      - name: Get Release Text
        shell: bash
        id: release_version
        env:
          GIT_TAG: '${{ github.event.inputs.git_tag }}'
        run: |
          cargo install tomlq
          set -x
          source tools/scripts/release/crates-to-publish.sh

          # Add Ockam as first crate
          ockam_version=$(eval "tomlq package.version -f implementations/rust/ockam/ockam/Cargo.toml")
          name=$(eval "tomlq package.name -f implementations/rust/ockam/ockam/Cargo.toml")

          text="Ockam $ockam_version"


          text="$text

          # Homebrew

          To install this release using Homebrew:

          \`\`\`bash
          $ brew tap build-trust/ockam
          $ brew install ockam
          \`\`\`"

          # Install Docker image
          text="$text

          # Docker

          To use the Docker OCI package:

          \`\`\`bash
          docker pull ghcr.io/build-trust/ockam:$ockam_version
          \`\`\`"

          text="$text

          # Precompiled Binaries

          \`\`\`bash
          # download sha256sums.txt
          curl --proto '=https' --tlsv1.2 -sSfL -O \\
            https://github.com/build-trust/ockam/releases/download/ockam_v${ockam_version}/sha256sums.txt

          # download sha256sums.txt.sig
          curl --proto '=https' --tlsv1.2 -sSfL -O \\
            https://github.com/build-trust/ockam/releases/download/ockam_v${ockam_version}/sha256sums.txt.sig

          # download our release public key
          curl --proto '=https' --tlsv1.2 -sSfL -o ockam.pub \\
            https://raw.githubusercontent.com/build-trust/ockam/develop/tools/docker/cosign.pub

          # verify signatures
          cosign verify-blob --key ockam.pub --signature sha256sums.txt.sig sha256sums.txt

          # download ockam command binary for your architecture
          curl --proto '=https' --tlsv1.2 -sSfL -O \\
            https://github.com/build-trust/ockam/releases/download/ockam_v${ockam_version}/ockam.x86_64-unknown-linux-gnu

          # verify that the sha256 hash of the downloaded binary is the same as
          # the corresponding hash mentioned in sha256sums.txt
          cat sha256sums.txt | grep ockam.x86_64-unknown-linux-gnu | sha256sum -c

          # rename the download binary and give it permission to execure
          mv ockam.x86_64-unknown-linux-gnu ockam
          chmod u+x ockam
          \`\`\`"

          text="$text

          # Terraform

          To install the [Ockam Terraform Provider](https://registry.terraform.io/providers/build-trust/ockam/$ockam_version), copy and paste this code into your Terraform configuration. Then, run \`terraform init\`.

          \`\`\`
          terraform {
            required_providers {
              ockam = {
                source = \"build-trust/ockam\"
                version = \"$ockam_version\"
              }
            }
          }
          provider "ockam" {}
          \`\`\`"

          text="$text

          # Rust Crates

          To use Ockam as a Rust library, add the following line to your Cargo.toml file:

          \`\`\`
          ockam = \"$ockam_version\"
          \`\`\`

          The following crates were published as part of this release:
          - \`$name $ockam_version\` ([Documentation](https://docs.rs/$name/$ockam_version/$name/), \
            [CHANGELOG](https://github.com/build-trust/ockam/blob/ockam_v$ockam_version/implementations/rust/ockam/$name/CHANGELOG.md))"

          for crate in ${updated_crates[@]}; do
            version=$(eval "tomlq package.version -f implementations/rust/ockam/$crate/Cargo.toml")
            name=$(eval "tomlq package.name -f implementations/rust/ockam/$crate/Cargo.toml")

            if [[ $name == "ockam" ]]; then
              echo "Skipping ockam crate"
              continue
            fi

            text="$text
          - \`$name $version\` ([Documentation](https://docs.rs/$name/$version/$name/), \
            [CHANGELOG](https://github.com/build-trust/ockam/blob/ockam_v$ockam_version/implementations/rust/ockam/$name/CHANGELOG.md))";
          done

          echo "::set-output name=version::$ockam_version"
          echo "::set-output name=tag_name::ockam_v$ockam_version"

          echo "$text" > release_note.md
          cat release_note.md

      - name: Import GPG key
        id: import_gpg
        uses: hashicorp/ghaction-import-gpg@78437f97569a473e42b227be84d4084c2dfb49ba
        env:
          GPG_PRIVATE_KEY: '${{ secrets.GPG_PRIVATE_KEY }}'
          PASSPHRASE: '${{ secrets.GPG_PASSPHRASE }}'

      - name: Ensure Tags Are Signed
        run: |
          git config --global user.email "${{ secrets.GPG_EMAIL }}"
          git config --global user.name "${{ secrets.GPG_USER_NAME }}"
          git config --global user.signingkey "${{ steps.import_gpg.outputs.fingerprint }}"
          git config --global commit.gpgsign true

      - name: Create Signed Tag
        run: |
          git tag -s ${{ steps.release_version.outputs.tag_name }} -m "Ockam Release"
          git push --tags

      - name: Create GitHub release
        id: release_upload_url
        uses: actions/create-release@4c11c9fe1dcd9636620a16455165783b20fc7ea0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: 'Ockam v${{ steps.release_version.outputs.version }}'
          tag_name: '${{ steps.release_version.outputs.tag_name }}'
          body_path: 'release_note.md'
          draft: true

      - name: Echo Link
        run: echo "${{ steps.release_upload_url.outputs.html_url }}"


  build_release:
    name: Build Release
    needs: create_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        build: [linux_86, macos, macos_86]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: linux_86
          os: ubuntu-18.04
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: macos_86
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - name: Echo Link
      run: echo "${{ needs.create_release.outputs.upload_url }}"
    - name: Install Rust
      uses: actions-rs/toolchain@b3ea035039aa8cb07d1f4a5168b0f8065c4a2eeb
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Install packages (Ubuntu)
      shell: bash
      if: matrix.os == 'ubuntu-18.04'
      run: |
        set -x
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          cargo install --version 0.1.16 cross
        else
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool
        fi

    ## TODO Cache for faster build for different targets

    - name: Build Binary
      shell: bash
      run: |
        set -x

        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          cross build --bin ockam --target ${{ matrix.target }} --verbose --release
        else
          cargo build --bin ockam --target ${{ matrix.target }} --verbose --release
        fi

    - name: Build archive
      shell: bash
      run: |
        set -x
        cp target/${{ matrix.target }}/release/ockam ockam.${{ matrix.target }}
        echo "ASSET=ockam.${{ matrix.target }}" >> $GITHUB_ENV
        ls $GITHUB_WORKSPACE

    - name: Install Cosign
      uses: sigstore/cosign-installer@48866aa521d8bf870604709cd43ec2f602d03ff2

    - name: Sign Binary
      shell: bash
      env:
        PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
        COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
      run: |
        cosign sign-blob --key env://PRIVATE_KEY ${{ env.ASSET }} > ${{ env.ASSET }}.sig

    - name: Upload release archive
      uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

    - name: Upload Signature
      uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}.sig
        asset_name: ${{ env.ASSET }}.sig
        asset_content_type: application/octet-stream

  build_elixir_nifs:
    name: Build Elixir NIFs
    needs: create_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        build: [macos, linux_x86_64]
        include:
        - build: macos
          os: macos-latest
          release_path: implementations/elixir/ockam/ockam_vault_software/priv/darwin_universal/native
          release_asset_name: ockam.darwin_universal_elixir_ffi.so
        - build: linux_x86_64
          os: ubuntu-20.04
          release_path: implementations/elixir/ockam/ockam_vault_software/_build/dev/lib/ockam_vault_software/priv/native
          release_asset_name: ockam.linux_elixir_ffi.so
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Install Rust
        uses: actions-rs/toolchain@b3ea035039aa8cb07d1f4a5168b0f8065c4a2eeb
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build NIF For Linux AMD64
        if: matrix.build == 'linux_x86_64'
        uses: docker://ghcr.io/build-trust/ockam-builder@sha256:dac128554a96b302b6907bda7b677b1832d7952b35e0b35c4f6402cf15fe03e3
        with:
          args: |
            bash -c "export PRIVATE_KEY='${{ secrets.COSIGN_PRIVATE_KEY }}' && export COSIGN_PASSWORD='${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}';
            set -xe && pwd && uname -a && ls && cargo clean && cargo build --release;
            cd implementations/elixir/ockam/ockam_vault_software;
            mix recompile.native;
            cd _build/dev/lib/ockam_vault_software/priv/native;
            cosign sign-blob --key env://PRIVATE_KEY libockam_elixir_ffi.so > libockam_elixir_ffi.so.sig;"

      - name: Build NIF For MacOS
        if: matrix.build == 'macos'
        working-directory: implementations/elixir/ockam/ockam_vault_software
        shell: bash
        run: |
          set -x
          brew install erlang

          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

          ./build-elixir-universal-lib.sh

      - name: Install Cosign
        if: matrix.build == 'macos'
        uses: sigstore/cosign-installer@48866aa521d8bf870604709cd43ec2f602d03ff2

      - name: Sign NIFs
        if: matrix.build == 'macos'
        shell: bash
        working-directory: ${{ matrix.release_path }}
        env:
          PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
        run: |
          cosign sign-blob --key env://PRIVATE_KEY libockam_elixir_ffi.so > libockam_elixir_ffi.so.sig

      - name: Upload Library
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.release_path }}/libockam_elixir_ffi.so
          asset_name: ${{ matrix.release_asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload Signature
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.release_path }}/libockam_elixir_ffi.so.sig
          asset_name: ${{ matrix.release_asset_name }}.sig
          asset_content_type: application/octet-stream

  sign_release:
    name: Sign Release Assets
    needs: [build_release, create_release, build_elixir_nifs]
    runs-on: ubuntu-20.04
    environment: release
    steps:
      - name: Fetch All Assets
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release download ${{ needs.create_release.outputs.tag_name }} -R build-trust/ockam

      - name: Generate File SHASum
        shell: bash
        run: shasum -a 256 ockam.* > sha256sums.txt

      - name: Install Cosign
        uses: sigstore/cosign-installer@48866aa521d8bf870604709cd43ec2f602d03ff2

      - name: Sign Files
        shell: bash
        env:
          PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
        run: cosign sign-blob --key env://PRIVATE_KEY sha256sums.txt > sha256sums.txt.sig

      - name: Upload SHASum File
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: sha256sums.txt
          asset_name: sha256sums.txt
          asset_content_type: application/octet-stream

      - name: Upload SHASum Signature File
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: sha256sums.txt.sig
          asset_name: sha256sums.txt.sig
          asset_content_type: application/octet-stream
