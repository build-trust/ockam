name: Rust

permissions:
  contents: read

on:
  merge_group:
  pull_request:
    paths:
      - ".github/workflows/rust.yml"
      - ".github/actions/**"
      - "**.rs"
      - "**.toml"
      - "**/Cargo.lock"
      - "implementations/rust/ockam/ockam_command/tests/**"
      - "**.gradle"
      - "tools/gradle/**"
      - "gradlew"
      - "gradlew.bat"
  push:
    paths:
      - ".github/workflows/rust.yml"
      - ".github/actions/**"
      - "**.rs"
      - "**.toml"
      - "**/Cargo.lock"
      - "implementations/rust/ockam/ockam_command/tests/**"
      - "**.gradle"
      - "tools/gradle/**"
      - "gradlew"
      - "gradlew.bat"
    branches:
      - develop
  schedule:
    # At 1 am.
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Commit SHA, to run workflow
      ockam_command_cli_version:
        description: SHA to build Ockam command CLI
      ockam_crate_version_to_test_with_docs_examples:
        description: Ockam crate version to tests docs.ockam.io library examples
      ockam_docs_ref:
        description: SHA or branch to run ockam docs test

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CI: true

jobs:
  lint:
    name: Rust - lint_${{ matrix.lint_projects }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        lint_projects:
          - cargo_readme
          - cargo_fmt_check
          - cargo_clippy
          - cargo_deny
          - cargo_toml_files
    defaults:
      run:
        shell: nix develop ./tools/nix#rust --keep CI --ignore-environment --command bash {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Install Nix
        uses: ./.github/actions/nix_installer

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          key: "${{ github.job }}-${{ matrix.lint_projects }}"

      - name: Run lint ${{ matrix.lint_projects }}
        run:  make -f implementations/rust/Makefile lint_${{ matrix.lint_projects }}

  build:
    name: Rust - build${{ matrix.build_projects != 'packages' && format('_{0}', matrix.build_projects) || '' }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        build_projects:
          - docs
          - packages
          - examples
          - nightly

    defaults:
      run:
        shell: nix develop ./tools/nix#rust${{matrix.build_projects == 'nightly' && '_nightly' || '' }} --keep CI --ignore-environment --command bash {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Install Nix
        uses: ./.github/actions/nix_installer

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          key: "${{ github.job }}-${{ matrix.build_projects }}"

      - name: Run build ${{ matrix.build_projects }}
        run:  make -f implementations/rust/Makefile build${{ matrix.build_projects == 'nightly' && '_packages' || format('_{0}', matrix.build_projects) }}

  test:
    name: Rust - test${{ matrix.test_projects != 'stable' && format('_{0}', matrix.test_projects) || '' }}
    runs-on: ubuntu-22.04
    services:
      ockam_cloud:
        image: ghcr.io/build-trust/ockam-cloud-node@sha256:518314876a5b07c263b88995792335c4426d940c10e5e638a60e66776d86cff5
    env:
      CLOUD_ADDRESS: ockam_cloud:4000
    defaults:
      run:
        shell: nix develop ./tools/nix#rust${{matrix.test_projects == 'nightly' && '_nightly' || '' }} --keep CI --ignore-environment --command bash {0}
    strategy:
      fail-fast: false
      matrix:
        test_projects:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Install Nix
        uses: ./.github/actions/nix_installer

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          key: "${{ github.job }}-${{ matrix.test_projects }}"

      - name: Run test on ${{ matrix.test_projects }}
        run:  make -f implementations/rust/Makefile test

  check:
    name: Rust - check_${{ matrix.check_projects }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - check_projects: cargo_update
            nix_toolchain: 'rust'
          - check_projects: no_std
            nix_toolchain: 'rust_nightly'
          - check_projects: tag
            nix_toolchain: 'rust'
          - check_projects: nightly
            nix_toolchain: 'rust_nightly'

    defaults:
      run:
        shell: nix develop ./tools/nix#${{matrix.nix_toolchain }} --keep CI --ignore-environment --command bash {0}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Install Nix
        uses: ./.github/actions/nix_installer

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          key: "${{ github.job }}-${{ matrix.check_projects }}"

      - name: Run check on ${{ matrix.check_projects }}
        run:  make -f implementations/rust/Makefile check${{ matrix.check_projects != 'nightly' && format('_{0}', matrix.check_projects) || '' }}

  test_ockam_command:
    name: Rust - test_ockam_command
    strategy:
      fail-fast: false
      matrix:
        build: [linux_86]
        include:
        - build: linux_86
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          container: "ghcr.io/build-trust/ockam-builder@sha256:65812150a60a114b1620f63dcf9f2380144985a213d54d3ef7978a0221bd147e"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout ockam cli repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.ockam_command_cli_version != '' && inputs.ockam_command_cli_version || inputs.commit_sha  }}
          path: ockam_cli

      - name: Checkout ockam bats repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.commit_sha }}
          path: ockam_bats

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          workspaces: "ockam_cli -> target"

      - name: Build Binary
        shell: bash
        working-directory: ockam_cli
        run: |
          rustc --version
          set -x
          cargo build --bin ockam
          echo "PATH=$(pwd)/target/debug:$PATH" >> $GITHUB_ENV;

      - name: Run Script On Ubuntu
        working-directory: ockam_bats
        shell: bash
        run: |
          ockam --version
          echo $(which ockam)
          bats implementations/rust/ockam/ockam_command/tests/bats;
        env:
          OCKAM_DISABLE_UPGRADE_CHECK: 1

  ockam_command_cross_build:
    name: Rust - ockam_command_cross_build
    strategy:
      fail-fast: false
      matrix:
        build: [linux_armv7, macos_silicon]
        include:
        - build: linux_armv7
          os: ubuntu-20.04
          toolchain: stable
          target: armv7-unknown-linux-musleabihf
          use-cross-build: true
        - build: macos_silicon
          os: macos-latest
          toolchain: stable
          target: aarch64-apple-darwin
          use-cross-build: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.commit_sha }}

      - uses: ./.github/actions/build_binaries
        with:
          use_cross_build: ${{ matrix.use-cross-build }}
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          platform_operating_system: ${{ matrix.os }}

  test_orchestrator_ockam_command:
    name: Rust - test_orchestrator_ockam_command
    runs-on: ubuntu-20.04
    container: ghcr.io/build-trust/artifacts-helper:latest
    if: github.event_name == 'merge_group'
    environment: merge_queue
    permissions:
      contents: read
      packages: read

    steps:
      - name: Run Ockam Bats Test On Development Cluster
        uses: build-trust/.github/actions/run_bats_test@custom-actions
        with:
          perform_ockam_enroll: 'true'
          script_path: "/artifacts-scripts"
          ockam_repository_ref: ${{ inputs.commit_sha }}
          controller_id: ${{ secrets.ORCHESTRATOR_DEVELOPMENT_CONTROLLER_ID }}
          controller_addr: ${{ secrets.ORCHESTRATOR_DEVELOPMENT_CONTROLLER_ADDRESS }}

  test_docs_rust_library_examples:
    name: Rust - test_docs_rust_library_examples
    runs-on: ubuntu-20.04
    container: ghcr.io/build-trust/ockam-builder@sha256:65812150a60a114b1620f63dcf9f2380144985a213d54d3ef7978a0221bd147e
    if: github.event_name == 'workflow_dispatch'

    steps:
      # Run ockam example code against a different version of ockam library
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.commit_sha }}
          path: ockam_examples

      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.ockam_crate_version_to_test_with_docs_examples }}
          path: ockam_library

      - uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4
        with:
          workspaces: "ockam_examples -> target"

      - name: Move Implementation Directory From Ockam Library To Ockam Examples
        run: |
          cp -r ockam_library/implementations/rust/ockam ockam_examples/implementations/rust/ockam

      - name: Run Ockam Examples
        working-directory: ockam_examples
        run: cargo test -p hello_ockam

  lint_docs_ockam_io_rust_examples:
    name: Rust - lint_docs_ockam_io_rust_examples
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/build-trust/ockam-builder@sha256:65812150a60a114b1620f63dcf9f2380144985a213d54d3ef7978a0221bd147e

    steps:
      - name: Checkout Ockam Repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.commit_sha }}
          path: ockam

      - name: Checkout Ockam Documentation Repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          ref: ${{ inputs.ockam_docs_ref == '' && 'develop' || inputs.ockam_docs_ref }}
          repository: build-trust/ockam-documentation
          path: ockam-documentation

      - name: Check Rust Documentation
        run: |
          CHECK_MD_DIR="ockam-documentation/reference/libraries/rust" CHECK_MD_DIR_RUST_EXAMPLE="ockam/examples/rust/get_started" OCKAM_HOME="ockam" ockam/tools/docs/check_documentation.sh
