name: Release Automation

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Commit SHA to create release
        required: true

permissions:
  # Contents permission allows us write to this repository.
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-20.04
    environment: release
    outputs:
      upload_url: ${{ steps.release_upload_url.outputs.upload_url }}
      tag_name: ${{ steps.release_version.outputs.tag_name }}
    steps:
      - name: Checkout Ockam
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ github.event.inputs.commit_sha }}
          fetch-depth: 0

      - name: Get Release Text
        shell: bash
        id: release_version
        run: |
          cargo install tomlq
          set -x
          source tools/scripts/release/crates-to-publish.sh

          # Add Ockam as first crate
          ockam_version=$(eval "tomlq package.version -f implementations/rust/ockam/ockam/Cargo.toml")
          name=$(eval "tomlq package.name -f implementations/rust/ockam/ockam/Cargo.toml")

          text="- \`$name $ockam_version\` ([Documentation](https://docs.rs/$name/$ockam_version/$name/), \
            [CHANGELOG](https://github.com/build-trust/ockam/blob/ockam_v$ockam_version/implementations/rust/ockam/$name/CHANGELOG.md))";

          for crate in ${updated_crates[@]}; do
            version=$(eval "tomlq package.version -f implementations/rust/ockam/$crate/Cargo.toml")
            name=$(eval "tomlq package.name -f implementations/rust/ockam/$crate/Cargo.toml")

            if [[ $name == "ockam" ]]; then
              echo "Skipping ockam crate"
              continue
            fi

            text="$text
          - \`$name $version\` ([Documentation](https://docs.rs/$name/$version/$name/), \
            [CHANGELOG](https://github.com/build-trust/ockam/blob/ockam_v$ockam_version/implementations/rust/ockam/$name/CHANGELOG.md))";
          done

          # Add information on homebrew package

          text="$text

          ---------------------------

          To install this release using Homebrew

          \`\`\`bash
          $ brew tap build-trust/ockam
          $ brew install ockam
          \`\`\`

          Ockam Homebrew repository can be found [here](https://github.com/build-trust/homebrew-ockam)"

          text="$text

          ----------------------

          We provide a [Terraform implementation](https://github.com/build-trust/terraform-provider-ockam)"


          text="$text

          ----------------------

          To use our docker package

          \`\`\`bash
          docker pull ghcr.io/build-trust/ockam:$ockam_version
          \`\`\`

          ------------------------

          All binaries and SHASum file are signed using [cosign](https://github.com/sigstore/cosign) with our private key, our public key can be found in the tools/docker/cosign.pub which can be used to verify if a binary was indeed signed by Ockam.
          To verify that a binary has been signed, download the .sig equivalent of the file and verify using the command below from the Ockam repository root directory

          \`\`\`bash
          $ cat tools/docker/cosign.pub
          -----BEGIN PUBLIC KEY-----
          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEt/XQMe16Vr/iIDr/ckKws8P3/x5W
          lu6nc6jxKa/Ue5C6RI6xAbNlvzmpY/KjUU3Jie+3P9UG7TkkrsVRC7Zi0g==
          -----END PUBLIC KEY-----

          $ cosign verify-blob --key tools/docker/cosign.pub --signature ockam.aarch64-apple-darwin.sig ockam.aarch64-apple-darwin
          Verified OK
          \`\`\`
          "

          echo "::set-output name=version::$ockam_version"
          echo "::set-output name=tag_name::ockam_v$ockam_version"

          echo "$text" > release_note.md
          cat release_note.md

      - name: Create GitHub release
        id: release_upload_url
        uses: actions/create-release@4c11c9fe1dcd9636620a16455165783b20fc7ea0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: 'Ockam ${{ steps.release_version.outputs.version }}'
          tag_name: '${{ steps.release_version.outputs.tag_name }}'
          body_path: 'release_note.md'
          draft: true

      - name: Echo Link
        run: echo "${{ steps.release_upload_url.outputs.html_url }}"


  build_release:
    name: Build Release
    needs: create_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        build: [linux_86, macos, macos_86]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: linux_86
          os: ubuntu-18.04
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: macos_86
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - name: Echo Link
      run: echo "${{ needs.create_release.outputs.upload_url }}"
    - name: Install Rust
      uses: actions-rs/toolchain@b3ea035039aa8cb07d1f4a5168b0f8065c4a2eeb
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Install packages (Ubuntu)
      shell: bash
      if: matrix.os == 'ubuntu-18.04'
      run: |
        set -x
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          cargo install --version 0.1.16 cross
        else
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool
        fi

    ## TODO Cache for faster build for different targets

    - name: Build Binary
      shell: bash
      run: |
        set -x

        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          cross build --bin ockam --target ${{ matrix.target }} --verbose --release
        else
          cargo build --bin ockam --target ${{ matrix.target }} --verbose --release
        fi

    - name: Build archive
      shell: bash
      run: |
        set -x
        cp target/${{ matrix.target }}/release/ockam ockam.${{ matrix.target }}
        echo "ASSET=ockam.${{ matrix.target }}" >> $GITHUB_ENV
        ls $GITHUB_WORKSPACE

    - name: Install Cosign
      uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25

    - name: Sign Binary
      shell: bash
      env:
        PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
        COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
      run: |
        cosign sign-blob --key env://PRIVATE_KEY ${{ env.ASSET }} > ${{ env.ASSET }}.sig

    - name: Upload release archive
      uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

    - name: Upload Signature
      uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}.sig
        asset_name: ${{ env.ASSET }}.sig
        asset_content_type: application/octet-stream

  build_elixir_nifs:
    name: Build Elixir NIFs
    needs: create_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        build: [macos, linux]
        include:
        - build: macos
          os: macos-latest
          release_path: implementations/elixir/ockam/ockam_vault_software/priv/darwin_universal/native
          release_asset_name: ockam.darwin_universal_elixir_ffi.so
        - build: linux
          os: ubuntu-20.04
          release_path: implementations/elixir/ockam/ockam_vault_software/_build/dev/lib/ockam_vault_software/priv/native
          release_asset_name: ockam.linux_elixir_ffi.so
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Install Rust
        uses: actions-rs/toolchain@b3ea035039aa8cb07d1f4a5168b0f8065c4a2eeb
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup Erlang
        run: |
          if [[ "${{ matrix.build }}" == "macos" ]]; then
            brew install erlang
          else
            # https://elixir-lang.org/install.html#gnulinux
            cd /tmp
            wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && sudo dpkg -i erlang-solutions_2.0_all.deb
            sudo apt-get update
            sudo apt-get -y install esl-erlang elixir libdbus-1-dev pkg-config
          fi

      - name: Build For Ockam Repository
        if: matrix.build == 'linux'
        run: cargo build --release

      - name: Install Targets For MacOS
        if: matrix.build == 'macos'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build NIF
        working-directory: implementations/elixir/ockam/ockam_vault_software
        shell: bash
        run: |
          set -x

          if [[ "${{ matrix.build }}" == "macos" ]]; then
            ./build-elixir-universal-lib.sh
          else
            mix recompile.native
          fi

      - name: Install Cosign
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25

      - name: Sign NIFs
        shell: bash
        working-directory: ${{ matrix.release_path }}
        env:
          PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
        run: |
          cosign sign-blob --key env://PRIVATE_KEY libockam_elixir_ffi.so > libockam_elixir_ffi.so.sig

      - name: Upload Library
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.release_path }}/libockam_elixir_ffi.so
          asset_name: ${{ matrix.release_asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload Signature
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.release_path }}/libockam_elixir_ffi.so.sig
          asset_name: ${{ matrix.release_asset_name }}.sig
          asset_content_type: application/octet-stream


  sign_release:
    name: Sign Release Assets
    needs: [build_release, create_release, build_elixir_nifs]
    runs-on: ubuntu-20.04
    environment: release
    steps:
      - name: Fetch All Assets
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release download ${{ needs.create_release.outputs.tag_name }} -R build-trust/ockam

      - name: Generate File SHASum
        shell: bash
        run: shasum -a 256 ockam.* > sha256sums.txt

      - name: Install Cosign
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25

      - name: Sign Files
        shell: bash
        env:
          PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
          COSIGN_PASSWORD: '${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}'
        run: cosign sign-blob --key env://PRIVATE_KEY sha256sums.txt > sha256sums.txt.sig

      - name: Upload SHASum File
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: sha256sums.txt
          asset_name: sha256sums.txt
          asset_content_type: application/octet-stream

      - name: Upload SHASum Signature File
        uses: actions/upload-release-asset@ef2adfe8cb8ebfa540930c452c576b3819990faa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: sha256sums.txt.sig
          asset_name: sha256sums.txt.sig
          asset_content_type: application/octet-stream
